import React, { useState } from "react";
import { useSelector, useDispatch } from "react-redux";
import { addFavorite, removeFavorite } from "../../store/favoritesSlice";
import { allLessons } from "../LessonPage/Lection/allLessons";
import WordLearningModule from "./WordLearningModule";

// ===== –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∞—É–¥–∏–æ-–∫–Ω–æ–ø–∫–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) =====
const AudioButton = ({ word }) => {
  const speak = () => {
    if (!word) return;
    const utterance = new SpeechSynthesisUtterance(word);
    utterance.lang = "de-DE";
    speechSynthesis.speak(utterance);
  };

  return (
    <button
      onClick={speak}
      // –ö–ª–∞—Å—Å—ã –∞—É–¥–∏–æ-–∫–Ω–æ–ø–∫–∏ –Ω–µ –º–µ–Ω—è–µ–º, –æ–Ω–∏ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ
      className="ml-2 text-xl hover:scale-110 transition-transform p-2 rounded-full bg-gray-200 dark:bg-gray-700 w-10 h-10 flex items-center justify-center flex-shrink-0"
      title={`–ü—Ä–æ—Å–ª—É—à–∞—Ç—å "${word}"`}
    >
      üîä
    </button>
  );
};

// ===== –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ (–º–µ–Ω—è–µ–º –∂–µ–ª—Ç—ã–π –Ω–∞ –±–æ–ª–µ–µ –º—è–≥–∫–∏–π) =====
const highlightMatch = (text, query) => {
  if (!query) return text;
  const regex = new RegExp(`(${query})`, "gi");
  return text.split(regex).map((part, idx) =>
    regex.test(part) ? (
      // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω bg-amber-200 –≤–º–µ—Å—Ç–æ bg-yellow-200
      <span key={idx} className="bg-amber-200 dark:bg-amber-600 rounded px-1">
        {part}
      </span>
    ) : (
      part
    )
  );
};

// ===== –¶–≤–µ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏: –ü–†–ò–Ø–¢–ù–´–ï –¶–í–ï–¢–ê =====
const getCardBg = (text) => {
  const match = text.match(/^(der|die|das)\s+/i);
  if (!match)
    // –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Ñ–æ–Ω: —Å–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π -> —Ç–µ–º–Ω–æ-—Å–µ—Ä—ã–π –¥–ª—è —Ö–æ—Ä–æ—à–µ–≥–æ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞
    return "bg-slate-100 text-slate-800 dark:bg-slate-700 dark:text-slate-200";

  const article = match[1].toLowerCase();

  // Der (–°–∏–Ω–∏–π -> –ù–µ–±–µ—Å–Ω–æ-–≥–æ–ª—É–±–æ–π/–ò–Ω–¥–∏–≥–æ)
  if (article === "der")
    return "bg-sky-200 text-sky-800 dark:bg-sky-800 dark:text-sky-100";

  // Die (–†–æ–∑–æ–≤—ã–π -> –†–æ–∑–æ–≤—ã–π-–ø–µ—Ä—Å–∏–∫–æ–≤—ã–π/–§—É–∫—Å–∏—è)
  if (article === "die")
    return "bg-fuchsia-200 text-fuchsia-800 dark:bg-fuchsia-800 dark:text-fuchsia-100";

  // Das (–ó–µ–ª–µ–Ω—ã–π -> –ú—è–≥–∫–∏–π –º—è—Ç–Ω—ã–π/–ò–∑—É–º—Ä—É–¥–Ω—ã–π)
  if (article === "das")
    return "bg-emerald-200 text-emerald-800 dark:bg-emerald-800 dark:text-emerald-100";

  return "bg-slate-100 text-slate-800 dark:bg-slate-700 dark:text-slate-200";
};

const DictionaryPage = () => {
  const dispatch = useDispatch();
  const favorites = useSelector((state) => state.favorites.items);

  const [search, setSearch] = useState("");
  const [tab, setTab] = useState("all");
  const [selectedLesson, setSelectedLesson] = useState("all");
  const [selectedLevel, setSelectedLevel] = useState("all");

  // ... (–ª–æ–≥–∏–∫–∞ —Å–ª–æ–≤–∞—Ä—è getDictionaryItems, items, filtered, toggleFavorite, levelsForLesson - –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
  const getDictionaryItems = () => {
    const vocab = [];
    allLessons.forEach((lesson) => {
      Object.entries(lesson.levels).forEach(([_, level]) => {
        level.matching?.items.forEach((item) => {
          vocab.push({
            german: item.german,
            russian: item.russian,
            lessonTitle: lesson.title,
            levelTitle: level.title,
          });
        });
      });
    });
    return vocab;
  };

  let items = getDictionaryItems();
  if (tab === "favorites") items = favorites;

  if (selectedLesson !== "all")
    items = items.filter((w) => w.lessonTitle === selectedLesson);
  if (selectedLevel !== "all")
    items = items.filter((w) => w.levelTitle === selectedLevel);

  const filtered = items.filter(
    (item) =>
      item.german.toLowerCase().includes(search.toLowerCase()) ||
      item.russian.toLowerCase().includes(search.toLowerCase())
  );

  const toggleFavorite = (word) => {
    if (favorites.find((w) => w.german === word.german)) {
      dispatch(removeFavorite(word));
    } else {
      dispatch(addFavorite(word));
    }
  };

  const levelsForLesson =
    selectedLesson === "all"
      ? []
      : Object.values(
          allLessons.find((l) => l.title === selectedLesson)?.levels || []
        ).map((l) => l.title);
  // ... (–∫–æ–Ω–µ—Ü –ª–æ–≥–∏–∫–∏ —Å–ª–æ–≤–∞—Ä—è)

  // ===== –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ (—Å—Ç–∏–ª–∏ –∫–Ω–æ–ø–æ–∫ –∏–∑–º–µ–Ω–µ–Ω—ã) =====
  if (tab === "repeat") {
    return (
      <div key="repeat" className="max-w-xl mx-auto p-4">
        <button
          onClick={() => setTab("favorites")}
          // –ò–∑–º–µ–Ω–µ–Ω —Å–µ—Ä—ã–π —Ñ–æ–Ω –Ω–∞ –±–æ–ª–µ–µ –º—è–≥–∫–∏–π
          className="mb-4 px-4 py-2 bg-slate-300 dark:bg-slate-700 hover:bg-slate-400 dark:hover:bg-slate-600 rounded w-full text-center"
        >
          ‚Üê –ù–∞–∑–∞–¥ –∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–º—É
        </button>

        <WordLearningModule
          title="–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"
          icon="üîÅ"
          useRedux={true}
          pageSize={5}
        />
      </div>
    );
  }

  // ===== –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ =====
  return (
    <div key={tab} className="max-w-xl mx-auto p-2 sm:p-4">
      <h1 className="text-2xl sm:text-3xl font-bold mb-3 text-center">
        –°–ª–æ–≤–∞—Ä—å
      </h1>

      {/* –í–∫–ª–∞–¥–∫–∏: —Å–∏–Ω–∏–π —Ü–≤–µ—Ç –∞–∫—Ü–µ–Ω—Ç–∞ —Å—Ç–∞–ª –±–æ–ª–µ–µ –≥–ª—É–±–æ–∫–∏–º –∏ —Å–ø–æ–∫–æ–π–Ω—ã–º */}
      <div className="flex justify-center gap-2 mb-3">
        {["all", "favorites", "repeat"].map((t) => (
          <button
            key={t}
            className={`flex-1 px-3 py-1.5 rounded text-sm sm:text-base text-center transition-colors duration-200 ${
              tab === t
                ? // –ê–∫—Ç–∏–≤–Ω—ã–π —Å–∏–Ω–∏–π: bg-indigo-600 (–±–æ–ª–µ–µ –≥–ª—É–±–æ–∫–∏–π –∏ –±–ª–∞–≥–æ—Ä–æ–¥–Ω—ã–π)
                  "bg-indigo-600 text-white dark:bg-indigo-700"
                : // –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π —Ñ–æ–Ω: bg-slate-200
                  "bg-slate-200 dark:bg-slate-700 hover:bg-slate-300 dark:hover:bg-slate-600"
            }`}
            onClick={() => setTab(t)}
          >
            {t === "all"
              ? "–í—Å–µ —Å–ª–æ–≤–∞"
              : t === "favorites"
              ? "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ"
              : "–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ"}
          </button>
        ))}
      </div>

      {/* –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—ã: –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞ —Å—Ç–∞–ª–∏ –º—è–≥—á–µ */}
      <div className="flex flex-col gap-2 mb-3">
        <input
          type="text"
          placeholder="–ü–æ–∏—Å–∫..."
          // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω bg-slate-100 –¥–ª—è —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º—ã
          className="px-3 py-1.5 border rounded w-full dark:bg-slate-700 dark:text-slate-200 text-base"
          value={search}
          onChange={(e) => setSearch(e.target.value)}
        />
        <div className="flex gap-2">
          <select
            className="px-3 py-1.5 border rounded w-1/2 dark:bg-slate-700 dark:text-slate-200 text-sm sm:text-base"
            value={selectedLesson}
            onChange={(e) => {
              setSelectedLesson(e.target.value);
              setSelectedLevel("all");
            }}
          >
            <option value="all">–í—Å–µ —É—Ä–æ–∫–∏</option>
            {allLessons.map((lesson, idx) => (
              <option key={idx} value={lesson.title}>
                {lesson.title}
              </option>
            ))}
          </select>
          {levelsForLesson.length > 0 && (
            <select
              className="px-3 py-1.5 border rounded w-1/2 dark:bg-slate-700 dark:text-slate-200 text-sm sm:text-base"
              value={selectedLevel}
              onChange={(e) => setSelectedLevel(e.target.value)}
            >
              <option value="all">–í—Å–µ —É—Ä–æ–≤–Ω–∏</option>
              {levelsForLesson.map((lvl, idx) => (
                <option key={idx} value={lvl}>
                  {lvl}
                </option>
              ))}
            </select>
          )}
        </div>
      </div>

      {/* üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ */}
      <div className="text-center text-xs sm:text-sm text-slate-500 dark:text-slate-400 mb-3">
        –ù–∞–π–¥–µ–Ω–æ: <b>{filtered.length}</b> / –í—Å–µ–≥–æ:{" "}
        <b>
          {tab === "favorites" ? favorites.length : getDictionaryItems().length}
        </b>
      </div>

      {/* –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤ */}
      <div className="flex flex-col gap-2">
        {filtered.map((item, idx) => (
          <div
            key={idx}
            // getCardBg —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –±–æ–ª–µ–µ –º—è–≥–∫–∏–µ —Ü–≤–µ—Ç–∞
            className={`p-3 border rounded flex justify-between items-center ${getCardBg(
              item.german
            )}`}
          >
            <div className="flex flex-col flex-1 min-w-0">
              <div className="font-bold flex items-center gap-1 text-base sm:text-lg flex-wrap">
                <span className="order-2 sm:order-none">
                  {highlightMatch(item.german, search)}
                </span>
                <span className="order-1 sm:order-none flex-shrink-0">
                  <AudioButton word={item.german} />
                </span>
              </div>
              <div
                // –ö–ª–∞—Å—Å—ã –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —É–¥–∞–ª–µ–Ω—ã, —Ç–∞–∫ –∫–∞–∫ getCardBg –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∫–æ–Ω—Ç—Ä–∞—Å—Ç
                className={`text-sm sm:text-base ml-1 mt-0.5`}
              >
                {highlightMatch(item.russian, search)}
              </div>
            </div>

            {/* –ö–Ω–æ–ø–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: –ñ–µ–ª—Ç—ã–π/–ö—Ä–∞—Å–Ω—ã–π —Å—Ç–∞–ª–∏ –±–æ–ª–µ–µ –ø—Ä–∏—è—Ç–Ω—ã–º–∏ */}
            <button
              className={`text-xl p-2 rounded-full flex-shrink-0 ml-2 h-10 w-10 flex items-center justify-center transition-colors duration-200 ${
                favorites.find((w) => w.german === item.german)
                  ? // –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è '‚òÖ': –±–æ–ª–µ–µ –≥–ª—É–±–æ–∫–∏–π, —Å —Ö–æ—Ä–æ—à–∏–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç–æ–º
                    "bg-red-500 hover:bg-red-600 text-white dark:bg-red-700 dark:hover:bg-red-600"
                  : // –ñ–µ–ª—Ç—ã–π –¥–ª—è '‚òÜ': –º—è–≥–∫–∏–π –æ—Ä–∞–Ω–∂–µ–≤–æ-–∂–µ–ª—Ç—ã–π (amber/orange), —á—Ç–æ–±—ã –Ω–µ –±—ã–ª "–∫–∏—Å–ª–æ—Ç–Ω—ã–º"
                    "bg-amber-400 hover:bg-amber-500 text-gray-800 dark:bg-amber-600 dark:text-gray-100 dark:hover:bg-amber-500"
              }`}
              onClick={() => toggleFavorite(item)}
              title={
                favorites.find((w) => w.german === item.german)
                  ? "–£–±—Ä–∞—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"
                  : "–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"
              }
            >
              {favorites.find((w) => w.german === item.german) ? "‚òÖ" : "‚òÜ"}
            </button>
          </div>
        ))}
      </div>
    </div>
  );
};

export default DictionaryPage;
